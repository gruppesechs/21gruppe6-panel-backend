// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String          @id @default(cuid())
  name           String          @unique
  email          String          @unique
  /// @TypeGraphQL.omit(output: true)
  password       String
  phoneNumber    String          @unique
  position       Position        @relation(fields: [positionId], references: [id])
  positionId     String
  isDisabled     Boolean         @default(false)
  role           Role            @default(USER)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  briefcaseSales BriefcaseSale[]
  transfers      Transfer[]
  expenses       Expense[]
  salaries       Salary[]
}

model Position {
  id                  String               @id @default(cuid())
  name                String               @unique
  salaryPerQuarter    Int
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  briefcaseMilestones BriefcaseMilestone[]
  users               User[]
}

model BriefcaseMilestone {
  id              String          @id @default(cuid())
  position        Position        @relation(fields: [positionId], references: [id])
  positionId      String
  count           Int
  bonusPercentage Int
  isActive        Boolean?        @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  briefcaseSales  BriefcaseSale[]
}

model BriefcaseSale {
  id                     String                 @id @default(cuid())
  user                   User                   @relation(fields: [userId], references: [id])
  userId                 String
  count                  Int
  briefcaseMilestone     BriefcaseMilestone     @relation(fields: [briefcaseMilestoneId], references: [id])
  briefcaseMilestoneId   String
  config                 Config                 @relation(fields: [configId], references: [id])
  configId               String
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  briefcaseSaleHistories BriefcaseSaleHistory[]
}

model BriefcaseSaleHistory {
  id              String        @id @default(cuid())
  briefcaseSale   BriefcaseSale @relation(fields: [briefcaseSaleId], references: [id])
  briefcaseSaleId String
  previousCount   Int
  newCount        Int
  createdAt       DateTime      @default(now())
}

model Company {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  contracts Contract[]
}

model Contract {
  id                String            @id @default(cuid())
  company           Company           @relation(fields: [companyId], references: [id])
  companyId         String
  weeklyFee         Int
  insuredPercentage Int
  isActive          Boolean?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  contractPayments  ContractPayment[]
  transfers         Transfer[]

  @@unique([companyId, isActive])
}

model ContractPayment {
  id         String   @id @default(cuid())
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String
  createdAt  DateTime @default(now())
}

model Transfer {
  id         String   @id @default(cuid())
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String
  config     Config   @relation(fields: [configId], references: [id])
  configId   String
  users      User[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Expense {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  refunded  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Salary {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Config {
  id                    String          @id @default(cuid())
  briefcaseEmployeePart Int
  contractEmployeePart  Int
  isActive              Boolean?        @unique
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  transfers             Transfer[]
  briefcaseSales        BriefcaseSale[]
}
